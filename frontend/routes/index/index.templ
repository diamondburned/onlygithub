package index

import "libdb.so/onlygithub/internal/templutil"
import "libdb.so/onlygithub/frontend/components"
import "libdb.so/onlygithub/frontend/layouts"
import "libdb.so/onlygithub"
import "net/http"
import "time"

type indexOpts struct {
	Me *onlygithub.User // optional
	Posts []onlygithub.Post
	OwnerAvatarURL string
}

templ index(r *http.Request, site *onlygithub.SiteConfig, owner *onlygithub.User, opts indexOpts) {
	<!DOCTYPE html>
	@layouts.Main("index", "", site, owner) {
		<header>
			<div class="user-banner">
				if site.BannerAsset != nil {
					<img src={ "/images/" + site.BannerAsset.String() } alt="banner"/>
				}
			</div>

			<div class="user-info">
				<img class="user-avatar" src={ opts.OwnerAvatarURL } alt="avatar"/>
				<h1 class="user-name">
					if owner.RealName != "" {
						<span class="real-name">{ owner.RealName }</span>
						<br />
						<small class="username">{ owner.Username }</small>
					} else {
						<span class="username">{ owner.Username }</span>
					}
				</h1>
				<p class="site-description">
					@templutil.UnsafeHTML(site.Description)
				</p>
			</div>
		</header>

		<nav>
			<div class="left"></div>
			<ul>
				<li>
					@navButton(r, "/", "Home")
				</li>
				<li>
					@navButton(r, "/about", "About")
				</li>
				<li>
					@navButton(r, "/membership", "Membership")
				</li>
			</ul>
			<div class="right">
				<div class="padding"></div>
				<div class="actions">
					if opts.Me != nil && opts.Me.ID == owner.ID {
						<a href="/create" role="button">
							@components.Icon("create", components.InlineIcon)
						</a>
					}
					if opts.Me != nil {
						<a href="/settings" role="button" title="Settings">
							@components.Icon("settings", components.InlineIcon)
						</a>
					} else {
						<a href="/login" role="button">
							@components.Icon("login", components.InlineIcon)
						</a>
					}
				</div>
				<div class="padding"></div>
			</div>
		</nav>

		<section id="posts">
			<h2>Latest Posts</h2>
			for _, post := range opts.Posts {
				<article
					id={ "post-" + post.ID.String() }
					class={
						"post",
						templ.KV("concealed", post.IsConcealed),
						templ.KV("has-images", len(post.Images) > 0),
					}
				>
					if post.IsConcealed {
						<div class="concealed-overlay">
							@components.Icon("paid", components.LargeIcon)
							<span>{ "Post is only available to " + visibilityMap[post.Visibility] }</span>
						</div>
					}
					<div class="cover">
						for _, image := range post.Images {
							<img
								if !image.ID.IsZero() {
									src={ "/images/" + image.ID.String() }
									alt="post image"
								} else {
									src={ image.PreviewURL }
									alt="blurred post image"
								}
							/>
						}
					</div>
					<div class="body">
						<div class="author">
							<img class="avatar" src={ opts.OwnerAvatarURL } alt="avatar"/>
							<div>
								<span class="username">{ owner.Username }</span>
								<time class="relative" datetime={ post.ID.Time().Format(time.RFC3339) }>
									{ post.ID.Time().Format("January _2, 2006 at 03:04pm") }
								</time>
							</div>
						</div>
						<div class="content markdown markdown-unsafe">
							{ post.Markdown }
						</div>
					</div>
				</article>
			}
		</section>
	}
}

templ navButton(r *http.Request, dst templ.SafeURL, name string) {
	<a href={ dst } data-active?={ r.URL.Path == string(dst) }>{ name }</a>
}
