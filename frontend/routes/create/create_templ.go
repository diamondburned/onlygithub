// Code generated by templ@(devel) DO NOT EDIT.

package create

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

// GoExpression
import "libdb.so/onlygithub/internal/templutil"
import "libdb.so/onlygithub/frontend/components"
import "libdb.so/onlygithub/frontend/layouts"
import "libdb.so/onlygithub"
import "net/http"

type createData struct {
	Tiers []onlygithub.Tier
}

func create(r *http.Request, site *onlygithub.SiteConfig, owner *onlygithub.User, data createData) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// DocType
		_, err = templBuffer.WriteString(`<!doctype html>`)
		if err != nil {
			return err
		}
		// TemplElement
		var_2 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<h1>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<a")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" href=\"/\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" class=\"back-link\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// TemplElement
			err = components.Icon("chevron_left", components.InlineIcon).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a>")
			if err != nil {
				return err
			}
			// Whitespace (normalised)
			_, err = templBuffer.WriteString(` `)
			if err != nil {
				return err
			}
			// Text
			var_3 := `Create New Post`
			_, err = templBuffer.WriteString(var_3)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h1>")
			if err != nil {
				return err
			}
			// Whitespace (normalised)
			_, err = templBuffer.WriteString(` `)
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<form")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" id=\"create-post-form\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" method=\"post\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" action=\"\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<formset>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<div")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" class=\"label-input-set\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<label")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" for=\"images\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// TemplElement
			err = components.Icon("image", 0).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label>")
			if err != nil {
				return err
			}
			// Element (void)
			_, err = templBuffer.WriteString("<input")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" type=\"file\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" id=\"images\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" name=\"images\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" multiple")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" accept=\"image/*\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<div")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" class=\"label-input-set\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<label")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" for=\"tier\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// TemplElement
			err = components.Icon("attach_money", 0).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<select")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" id=\"tier\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" name=\"price\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<option")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" value=\"0\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Text
			var_4 := `Free`
			_, err = templBuffer.WriteString(var_4)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
			// For
			for _, tier := range data.Tiers {
				// Element (standard)
				_, err = templBuffer.WriteString("<option")
				if err != nil {
					return err
				}
				// Element Attributes
				_, err = templBuffer.WriteString(" value=\"{ tier.Price }\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(">")
				if err != nil {
					return err
				}
				// StringExpression
				var var_5 string = tier.Name
				_, err = templBuffer.WriteString(templ.EscapeString(var_5))
				if err != nil {
					return err
				}
				// Whitespace (normalised)
				_, err = templBuffer.WriteString(` `)
				if err != nil {
					return err
				}
				// Text
				var_6 := `(`
				_, err = templBuffer.WriteString(var_6)
				if err != nil {
					return err
				}
				// StringExpression
				var var_7 string = tier.Price.String()
				_, err = templBuffer.WriteString(templ.EscapeString(var_7))
				if err != nil {
					return err
				}
				// Text
				var_8 := `)`
				_, err = templBuffer.WriteString(var_8)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</option>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</select>")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</formset>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<formset>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<div")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" class=\"radio-group\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (void)
			_, err = templBuffer.WriteString("<input")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" type=\"radio\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" id=\"visibility-none\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" name=\"visibility\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" value=\"\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" checked")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<label")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" for=\"visibility-none\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// TemplElement
			err = components.Icon("visibility_off", 0).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label>")
			if err != nil {
				return err
			}
			// Element (void)
			_, err = templBuffer.WriteString("<input")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" type=\"radio\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" id=\"visibility-sponsor\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" name=\"visibility\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" value=\"sponsor\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<label")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" for=\"visibility-sponsor\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// TemplElement
			err = components.Icon("attach_money", 0).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label>")
			if err != nil {
				return err
			}
			// Element (void)
			_, err = templBuffer.WriteString("<input")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" type=\"radio\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" id=\"visibility-private\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" name=\"visibility\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" value=\"private\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<label")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" for=\"visibility-private\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// TemplElement
			err = components.Icon("lock", 0).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label>")
			if err != nil {
				return err
			}
			// Element (void)
			_, err = templBuffer.WriteString("<input")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" type=\"radio\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" id=\"visibility-public\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" name=\"visibility\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" value=\"public\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<label")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" for=\"visibility-public\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// TemplElement
			err = components.Icon("public", 0).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label>")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<div")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" class=\"toggle-checkbox\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (void)
			_, err = templBuffer.WriteString("<input")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" type=\"checkbox\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" id=\"comments\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" name=\"comments\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" value=\"1\"")
			if err != nil {
				return err
			}
			if !site.AllowComments {
				_, err = templBuffer.WriteString(" disabled")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<label")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" for=\"comments\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// TemplElement
			err = components.Icon("comment", 0).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label>")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<div")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" class=\"toggle-checkbox\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (void)
			_, err = templBuffer.WriteString("<input")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" type=\"checkbox\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" id=\"reactions\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" name=\"reactions\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" value=\"1\"")
			if err != nil {
				return err
			}
			if !site.AllowReactions {
				_, err = templBuffer.WriteString(" disabled")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<label")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" for=\"reactions\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// TemplElement
			err = components.Icon("add_reaction", 0).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label>")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</formset>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<formset")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" class=\"content-editor\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<textarea")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" id=\"editor\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" name=\"content\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// StringExpression
			var var_9 string = templutil.Literal(`
						# Hello World

						This is a test post. The title will be the first h1, if there is one.
						You can also drag and drop images into the editor to upload them!
					`)
			_, err = templBuffer.WriteString(templ.EscapeString(var_9))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</textarea>")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</formset>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<button")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" type=\"submit\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// TemplElement
			err = components.Icon("add", 0).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			// Whitespace (normalised)
			_, err = templBuffer.WriteString(` `)
			if err != nil {
				return err
			}
			// Text
			var_10 := `Create`
			_, err = templBuffer.WriteString(var_10)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button>")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</form>")
			if err != nil {
				return err
			}
			// Whitespace (normalised)
			_, err = templBuffer.WriteString(` `)
			if err != nil {
				return err
			}
			// Element (void)
			_, err = templBuffer.WriteString("<meta")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" name=\"swup-script\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" content=\"/create/create.js\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = layouts.Main("create", "Create a Post", site, owner).Render(templ.WithChildren(ctx, var_2), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

