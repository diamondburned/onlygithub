// Code generated by templ@(devel) DO NOT EDIT.

package settings

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

// GoExpression
import "libdb.so/onlygithub/frontend/components"
import "libdb.so/onlygithub/frontend/layouts"
import "libdb.so/onlygithub"
import "net/http"

type settingsData struct {
	Me				 *onlygithub.User
	MeConfig	 *onlygithub.UserConfig
	SiteConfig *onlygithub.SiteConfig
}

func checkbox(id, title, desc string, checked bool) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// Element (standard)
		_, err = templBuffer.WriteString("<label")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" for=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(id))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<p>")
		if err != nil {
			return err
		}
		// StringExpression
		var var_2 string = title
		_, err = templBuffer.WriteString(templ.EscapeString(var_2))
		if err != nil {
			return err
		}
		// Element (void)
		_, err = templBuffer.WriteString("<br>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<small>")
		if err != nil {
			return err
		}
		// StringExpression
		var var_3 string = desc
		_, err = templBuffer.WriteString(templ.EscapeString(var_3))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</small>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"big-checkbox\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (void)
		_, err = templBuffer.WriteString("<input")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" type=\"checkbox\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" id=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(id))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" name=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(id))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		if checked {
			_, err = templBuffer.WriteString(" checked")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"checkbox\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func settings(r *http.Request, site *onlygithub.SiteConfig, owner *onlygithub.User, data settingsData) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_4 := templ.GetChildren(ctx)
		if var_4 == nil {
			var_4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// DocType
		_, err = templBuffer.WriteString(`<!doctype html>`)
		if err != nil {
			return err
		}
		// TemplElement
		var_5 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<h1>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<a")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" href=\"/\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" class=\"back-link\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// TemplElement
			err = components.Icon("chevron_left", components.InlineIcon).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a>")
			if err != nil {
				return err
			}
			// Whitespace (normalised)
			_, err = templBuffer.WriteString(` `)
			if err != nil {
				return err
			}
			// Text
			var_6 := `Settings`
			_, err = templBuffer.WriteString(var_6)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h1>")
			if err != nil {
				return err
			}
			// Whitespace (normalised)
			_, err = templBuffer.WriteString(` `)
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<section>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<h2>")
			if err != nil {
				return err
			}
			// Text
			var_7 := `Preferences`
			_, err = templBuffer.WriteString(var_7)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h2>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<form")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" id=\"user-config-form\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" method=\"post\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<formset")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" class=\"toggles\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// TemplElement
			err = checkbox("show-comments", "Show comments", "Show or hide comments on the homepage", data.MeConfig.ShowComments).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			// TemplElement
			err = checkbox("anonymous", "Anonymous", "Hide your username from other users", data.MeConfig.Anonymous).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</formset>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<button")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" type=\"submit\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// TemplElement
			err = components.Icon("save", 0).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			// Whitespace (normalised)
			_, err = templBuffer.WriteString(` `)
			if err != nil {
				return err
			}
			// Text
			var_8 := `Save`
			_, err = templBuffer.WriteString(var_8)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button>")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</form>")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</section>")
			if err != nil {
				return err
			}
			// Whitespace (normalised)
			_, err = templBuffer.WriteString(` `)
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<section>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<h2>")
			if err != nil {
				return err
			}
			// Text
			var_9 := `Account`
			_, err = templBuffer.WriteString(var_9)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h2>")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<form")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" id=\"logout\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" method=\"post\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" action=\"/logout\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Element (standard)
			_, err = templBuffer.WriteString("<button")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" type=\"submit\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" class=\"del\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// TemplElement
			err = components.Icon("logout", 0).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			// Whitespace (normalised)
			_, err = templBuffer.WriteString(` `)
			if err != nil {
				return err
			}
			// Text
			var_10 := `Log out`
			_, err = templBuffer.WriteString(var_10)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button>")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</form>")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</section>")
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = layouts.Main("settings", "Settings", site, owner).Render(templ.WithChildren(ctx, var_5), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

